#!/bin/sh
# Rereate SlackBuilds repository in Git
#
# This scripts recreates SlackBuilds repository in Git, because proper
# migration is not possible due to its structure and the modifications of this
# structure done manually in CVS in the past. The different build scripts are
# organized as separate repositories and incorporated in this superproject as
# submodules.
#

CWD=$(pwd)
REPO_DIR=repo
REVN=0

# Bash colors
C_RED=$'\e[31;01m'
C_GREEN=$'\e[32;01m'
C_BLUE=$'\e[0;34m'
C_NORMAL=$'\e[0m'

ERRSTR="${C_RED}Error${C_NORMAL}"

# Print status functions
echo_done() {
  echo "${C_GREEN}done${C_NORMAL}."
}

echo_fail() {
  echo "${C_RED}fail${C_NORMAL}!"
}

echo_status() {
  if [ $? != 0 ]; then
    echo_fail
  else
    echo_done
  fi
}

function add_files {
  new_files=""
  res=0

  for file in $2; do
    file_dir=$(dirname $file)
    if [ "$file_dir" != "." ]; then
      mkdir -p "$file_dir"
      ((res += $?))
    fi

    # Remove trailing file version (e.g. .1, .2, .3, etc.)
    file_new=$(echo $file | sed 's/\-[0-9]\+$//')
    new_files="$new_files $file_new"
    cp ${CWD}/$file $file_new
    ((res += $?))

    # Add to repository if initial version
    if [ "$file" == "$file_new" ]; then
      git add $file_new
      ((res += $?))
    fi
  done

  GIT_COMMITTER_DATE="$1" \
    git commit --no-gpg-sign --date "$1" -m "$3" $new_files
  ((res += $?))

  return $res
}

function add_submodule {
  res=0
  git submodule add --branch $3 $4 $2
  ((res += $?))
  GIT_COMMITTER_DATE="$1" \
    git commit --no-gpg-sign --date "$1" --message "Add $2" .gitmodules $2
  ((res += $?))

  return $res
}

function merge {
  res=0

  git merge --no-commit $3 >/dev/null 2>&1
  ((res += $?))

  # Add file to resolve merge conflict
  if [ $res -gt 0 -a -n "$2" ]; then
    res=0
    file_new=$(echo $2 | sed 's/\-[0-9]\+$//')
    cp ${CWD}/$2 $file_new
    ((res += $?))

    git add $file_new
    ((res += $?))
  fi

  # Resolve everything else
  for conflict in $(git diff --name-only --diff-filter=U); do
    git add $conflict
  done

  GIT_COMMITTER_DATE="$1" \
    git commit --no-gpg-sign --date "$1" --message "$4"
  ((res += $?))

  return $res
}

function move {
  res=0

  git mv "$2" "$3"
  ((res += $?))
  GIT_COMMITTER_DATE="$1" \
    git commit --no-gpg-sign --date "$1" --message "$4" "$2" "$3" .gitmodules
  ((res += $?))

  return $res
}

function reorg {
  res=0

  while IFS=';' read -r name serie; do
    if [ ! -e "$serie" ]; then
      mkdir "$serie"
    fi

    git mv "$name" "$serie/$name"
    ((res += $?))
  done < ${CWD}/reorg_series.csv

  GIT_COMMITTER_DATE="$1" \
    git commit --no-gpg-sign --date "$1" --message "$2"
  ((res += $?))

  return $res
}

function sm_set_branch {
  res=0

  git submodule set-branch --branch $3 $2
  ((res += $?))
  GIT_COMMITTER_DATE="$1" \
    git commit --no-gpg-sign --date "$1" --message "Set branch of $2 to $3" \
      .gitmodules
  ((res += $?))

  return $res
}

if [ -e $REPO_DIR ]; then
  echo "${ERRSTR}: Repository directory '$REPO_DIR' exists!"
  exit 1
fi

echo -n "Create repo directory... "
mkdir repo
echo_status
cd repo

echo -n "Initialize empty repository... "
git init >/dev/null
echo_status

while IFS=';' read -r rev_date rev_type rev_name rev_branch rev_message rev_repo; do
  # Skip header
  if [ "${rev_date}" == "Date" ]; then
    continue
  fi

  if [ "${rev_type}" != "branch"    ] && \
     [ "${rev_type}" != "branch_sw" ] && \
     [ "${rev_type}" != "merge_ff"  ] && \
     [ "${rev_type}" != "switch"    ]
  then
    echo -n "Revision ${REVN} (from $rev_date): "
    REVN=$((REVN + 1))
  else
    echo -n "Action: "
  fi

  case $rev_type in
    branch)
      echo -n "creating branch ${rev_branch}... "
      git branch "$rev_branch" >/dev/null 2>&1
      echo_status
      ;;
    branch_sw)
      echo -n "creating and switching to branch ${rev_branch}... "
      git switch -c "$rev_branch" >/dev/null 2>&1
      echo_status
      ;;
    files)
      echo -n "adding/updating file(s) ${rev_name}... "
      add_files "$rev_date" "$rev_name" "$rev_message" >/dev/null 2>&1
      echo_status
      ;;
    merge_ff)
      echo -n "merge (fast forward to) ${rev_branch}... "
      git merge --ff-only --no-commit "$rev_branch" >/dev/null 2>&1
      echo_status
      ;;
    merge)
      echo -n "merge ${rev_branch}... "
      merge "$rev_date" "$rev_name" "$rev_branch" "$rev_message"  >/dev/null 2>&1
      echo_status
      ;;
    move)
      move_from=$(echo $rev_name | cut -d : -f 1)
      move_to=$(echo $rev_name | cut -d : -f 2)
      echo -n "moving ${move_from} to ${move_to}... "
      move "$rev_date" "$move_from" "$move_to" "$rev_message" >/dev/null 2>&1
      echo_status
      ;;
    reorg)
      echo -n "reorganizing in series... "
      reorg "$rev_date" "$rev_message" >/dev/null 2>&1
      echo_status
      ;;
    sm_branch)
      echo -n "changing submodule ${rev_name} branch to ${rev_branch} ... "
      sm_set_branch "$rev_date" "$rev_name" "$rev_branch" >/dev/null 2>&1
      echo_status
      ;;
    submodule)
      if [ "$rev_branch" != "main" ]; then
        echo -n "adding submodule ${rev_name} on branch ${rev_branch}... "
      else
        echo -n "adding submodule ${rev_name}... "
      fi
      add_submodule "$rev_date" "$rev_name" "$rev_branch" "$rev_repo" >/dev/null 2>&1
      echo_status
      ;;
    switch)
      echo -n "switching to ${rev_branch} branch... "
      git switch --recurse-submodules "${rev_branch}" >/dev/null 2>&1
      echo_status
      ;;
    *)
      echo "${ERRSTR}: Unknown revision type '${rev_type}'!"
      exit 2
      ;;
  esac
done < ${CWD}/revisions.csv

