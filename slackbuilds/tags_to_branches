#!/bin/bash
# Replace SLACK-MJ_MI tags with branches

# Bash colors
C_RED=$'\e[31;01m'
C_GREEN=$'\e[32;01m'
C_BLUE=$'\e[0;34m'
C_YELLOW=$'\e[33;01m'
C_NORMAL=$'\e[0m'

# Print status functions
echo_done() {
  echo "${C_GREEN}done${C_NORMAL}."
}

echo_fail() {
  echo "${C_RED}fail${C_NORMAL}!"
}

echo_status() {
  if [ $? != 0 ]; then
    echo_fail
  else
    echo_done
  fi
}


if [ ! -e .git -o ! -d .git ]; then
  echo "${C_RED}Error${C_NORMAL}: The current directory is NOT a Git repository!"
  exit 1
fi

for tag_name in $(git tag -l | grep -E 'SLACK\-[0-9]{2}_[0-9][0-9]?'); do
  tag_rev=$(git rev-list -n 1 tags/$tag_name)
  echo "Found tag: ${C_YELLOW}${tag_name}${C_NORMAL} (at $tag_rev):"

  echo -n "  Checking for local and remote branches with the same name... "

  loc_branch=$(git branch --list $tag_name -vv)

  if [ -n "$loc_branch" ]; then
    echo
    echo "    Found local branch: $loc_branch"
  fi

  rem_branch=$(git ls-remote --heads origin $tag_name)

  if [ -n "$rem_branch" ]; then
    echo
    echo "    Found remote branch: $rem_branch"
  fi

  if [ -n "$loc_branch" -o -n "$rem_branch" ]; then
    echo "    ${C_RED}Error${C_NORMAL}: Please, first delete or rename the branch!"
  else
    echo " ${C_BLUE}none found${C_NORMAL}."

    echo -n "    Removing local tag ${C_YELLOW}${tag_name}${C_NORMAL}... "
    git tag --delete $tag_name 2>&1 >/dev/null
    echo_status

    echo -n "    Removing remote tag ${C_YELLOW}${tag_name}${C_NORMAL}... "
    git push --delete origin ${tag_name} 2>&1 >/dev/null
    echo_status

    echo -n "    Creating branch ${C_RED}${tag_name}${C_NORMAL} at ${tag_rev}... "
    git branch ${tag_name} ${tag_rev} 2>&1 >/dev/null
    echo_status

    echo -n "    Pushing branch ${C_RED}${tag_name}${C_NORMAL} to remote... "
    git push -u origin ${tag_name} 2>&1 >/dev/null
    echo_status
  fi
done

